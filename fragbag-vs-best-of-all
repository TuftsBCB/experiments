#!/usr/bin/env python2

import os
import os.path

import pybcb as bcb
import pybcb.flags as flags

flags.use_all('cpu', 'tmp-dir', 'results-dir',
              'ignore-cache', 'no-cache')
flags.use('boa', (
    lambda: flags.add('--boa', type=str,
                      default='/data/bio/best-of-all',
                      help='A directory containing Kolodny\'s best of all '
                           'structural alignment results.'),
    flags.verify_path,
))
flags.use('thresholds', (
    lambda: flags.add('--thresholds', type=float, nargs='+',
                      default=[2.0, 3.5, 5.0],
                      help='The thresholds at which to compute average AUC.'),
    None,
))
flags.use('frag_libs', (
    lambda: flags.add('frag_libs', type=str, nargs='+',
                      help='The fragment libraries to compute an AUC for.'),
    None,
))
flags.init()

def open_boa(fpath):
    """
    Given a directory containing Rachel Kolodny's "best-of-all" results
    from six different structural aligners, return a dictionary with
    three keys: `dompath`, `aligners` and `domains`. `aligners` is a
    dictionary of align names to file paths of aligner matrix files
    (SAS scores) and `domains` is a list of CATH domains, in order,
    corresponding to the entries in each aligner matrix file. Finally,
    `dompath` is the file path to the file containing CATH domains.
    """
    aligners = ['ce', 'dali', 'dejavu', 'getter', 'ssap', 'ssm']
    info = {'aligners': {}, 'domains': [], 'dompath': ''}
    for aligner in aligners:
        info['aligners'][aligner] = os.path.join(fpath, 'matrix.%s' % aligner)
        if not os.access(info['aligners'][aligner], os.R_OK):
            bcb.eprintln('Could not find alignment distances for aligner "%s" '
                         'in "%s".' % (aligner, info[aligner]))
            bcb.exit(1)

    info['dompath'] = os.path.join(fpath, 'cath_domain_labels')
    try:
        with open(info['dompath']) as fdomains:
            info['domains'] = [line.split()[0].strip() for line in fdomains]
    except IOError:
        bcb.eprintln('Could not open CATH domain list at "%s".'
                     % info['dompath'])
        bcb.exit(1)
    return info

bcb.set_exp_dir(flags.config.tmp_dir)
bcb.set_results_dir(flags.config.results_dir)
bcb.make()

bcb.makedirs(bcb.ejoin('bowdbs'))

flib_paths = flags.config.frag_libs
flib_names = map(bcb.flib_name, flib_paths)
boa = open_boa(flags.config.boa)

# Generate a best-of-all matrix in exactly the same format as the matrices
# given. This is shelled out to Go because Python is pitifully slow.
fbest = bcb.ejoin('matrix.all')
bcb.cached_cmd([fbest], 'boa-make', fbest, *boa['aligners'].values())

# Make the BOW database for the given fragment libraries containing all of the
# CATH entries from the best-of-all alignment test.
for fpath, fname in zip(flib_paths, flib_names):
    bowdb = bcb.ejoin('bowdbs', '%s.bowdb' % fname)
    bcb.cached_cmd([bowdb], 'flib', 'mk-bowdb',
                            '-overwrite', bowdb, fpath, *boa['domains'])

for threshold in flags.config.thresholds:
    def auc_path(which, name):
        return bcb.ejoin('auc', str(threshold), which, name)
    bcb.makedirs(bcb.ejoin('auc', str(threshold), 'aligners'))
    bcb.makedirs(bcb.ejoin('auc', str(threshold), 'bowdbs'))

    # Compute the AUCs for each aligner at this threshold.
    aucFiles = []
    for a in boa['aligners']:
        aucFiles.append(boa['aligners'][a])
        aucFiles.append(auc_path('aligners', a))
    bcb.cached_cmd(aucFiles, 'boa-auc', '-threshold', str(threshold),
                             boa['dompath'], fbest, *aucFiles)

    # Now compute AUCs for each fragment library at this threshold.
    aucFiles = []
    for fname in flib_names:
        aucFiles.append(bcb.ejoin('bowdbs', '%s.bowdb' % fname))
        aucFiles.append(auc_path('bowdbs', fname))
    bcb.cached_cmd(aucFiles, 'boa-auc', '-threshold', str(threshold),
                             boa['dompath'], fbest, *aucFiles)

    # Now merge many of the AUCs into a smaller number of files.
    # Each file distinguishes threshold, and whether it was an aligner or a BOW 
    # DB.
    def collect(to, aucFiles):
        aucs = []
        for aucFile in aucFiles:
            entity = os.path.basename(aucFile)
            aucs.append((entity, float(open(aucFile).read().strip())))
        aucs = sorted(aucs, key=lambda (_, auc): auc, reverse=True)

        w = open(to, 'w+')
        for entity, auc in aucs:
            print >> w, '%s\t%f' % (entity, auc)
        w.close()
    collect(bcb.rjoin('%s-aligners.auc' % threshold),
            bcb.eglob('auc/%s/aligners/*' % threshold)) 
    collect(bcb.rjoin('%s-bowdbs.auc' % threshold),
            bcb.eglob('auc/%s/bowdbs/*' % threshold)) 

